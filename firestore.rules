rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /lobbies/{code} {
      // to combat the delete room issue where the host is potentially stalker
      // allow the second player in the lobby to be co-host 
      // since in the future the second player in the lobby might become host if the host leaves
      function isHost(){
        return request.auth.uid == resource.data.uids[0] || request.auth.uid == resource.data.uids[1];
      }
      allow get: if true;

      allow write: if true; // TODO: make an actual rule

      match /privatePlayers/{uid} {
        allow get: if request.auth.uid == uid;
      }

      match /promptAnswers/{uid} {
        function validAnswer() {
          return request.resource.data.answer is string
            && 0 < request.resource.data.answer.size() && request.resource.data.answer.size() <= 50
            && request.resource.data.answer == request.resource.data.answer.trim();
        }

        allow create: if request.auth.uid == uid && validAnswer() && request.resource.data.keys().hasOnly(['answer']);
      }

      match /chatRooms/{roomId} {
        // functions to use in chatmessages
        function roomData(){
          return get(/databases/$(database)/documents/lobbies/$(code)/chatRooms/$(roomId)).data
        }
        function isPair(){
          return request.auth.uid in roomData().pair 
        }
        function canRead(){
          return isPair() || request.auth.uid in roomData().viewers ;
        }
        // firestore didn't like me using the above function for chatroom
        // I think its because the info is in the resource object
        allow read: if request.auth.uid in resource.data.pair || request.auth.uid in resource.data.viewers ;
        allow delete: if isHost();
        match /chatMessages/{messageId}{
          allow read: if canRead();
          allow write: if isPair();
        }
      }
    }

    match /users/{userId} {
      function validateAttrs(){
        return request.resource.data.keys().hasOnly(['displayName', 'avatar'])
          && request.resource.data.displayName is string && request.resource.data.displayName.trim().size() >= 3 
          && request.resource.data.displayName.trim().size() <= 15 
          && request.resource.data.displayName.matches('[A-Za-z0-9-_]+')
          && request.resource.data.avatar is number && int(request.resource.data.avatar) == request.resource.data.avatar 
          && request.resource.data.avatar >= 0 && request.resource.data.avatar <=12;
      }

      // allows anyone to read that information
      allow read;
      allow create, update: if request.auth.uid == userId && validateAttrs();
    }
  }
}